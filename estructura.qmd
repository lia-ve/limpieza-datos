---
title: "Estructura"
---

Durante un análisis preliminar, se debe buscar detectar y corregir problemas estructurales relacionados con el formato del conjunto de datos. Por ejemplo:

-   Demasiados campos: frecuentemente ocurre con redundancias, o con datos que se pueden concatenar en un solo campo (líneas de dirección, por ejemplo)

-   Campos faltantes, que quizás se pueden extrapolar de otros campos existentes.

-   Falta de correspondencia entre valores y campos

-   Campos mal definidos, quizás con algún problema en el tipo de valor que se utiliza. 

## Conjunto de Datos *Air Quality*

<https://archive.ics.uci.edu/dataset/360/air+quality>

Leamos con cuidado la documentación:

-   Cuenta con $5$ variables y $9358$ observaciones.

-   Los valores faltantes están marcados con $-200$.

## Cargar datos

Importemos pandas en una celda aparte:

```{python}
import pandas as pd
import numpy as np
```

Mediante pandas, se puede especificar un separador a la hora de cargar archivos csv. Por lo general, esté va a ser `;`.

```{python}
df = pd.read_csv('data/AirQualityUCI.csv', sep=';')
```

Nos interesa verificar la estructura del archivo leído:

```{python}
df.info()
```

Y validar visualmente que los valores leídos parecen correctos:

```{python}
df
```

## Eliminar filas y columnas sobrantes

Quitamos las columnas sobrantes, que solo tienen valores nulos:

```{python}
df = df.iloc[:, :-2]
# df = df.drop(columns=["Unnamed: 15", "Unnamed: 16"])
df
```

```{python}
df.info()
```

Y las filas sobrantes, que sobreentendemos por la cantidad de valores no-nulos y la cantidad de entries que se encuentran al partir del indice 9357:

```{python}
df = df.iloc[:9357, :]
# df = df.dropna()
df
```

> Nota: el método `dropna` por defecto elimina todas las filas que tienen algún nulo, si no hubiésemos eliminado las columnas finales habría sido (un poco) más complicado.

Ahora tenemos los datos que realmente nos interesan, con $9357$ filas y $15$ columnas.

## Guardar como parquet para continuar

Necesitamos un formato que pueda mantener la información de los tipos de datos, los valores especiales y la estructura. Ese formato no es `CSV`. Como estamos utilizando pandas, un formato que conviene utilizar es `parquet`, ya que aparte de poder almacenar esta información, también es bastante más eficiente a nivel de lectura y almacenamiento.

```{python}
df.to_parquet("data/air_quality_uci1.parquet")
```